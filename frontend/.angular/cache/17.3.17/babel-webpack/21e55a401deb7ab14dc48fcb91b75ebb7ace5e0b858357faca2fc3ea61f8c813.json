{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { interval } from 'rxjs';\nlet RequestsComponent = class RequestsComponent {\n  constructor(route, router, webhookService) {\n    this.route = route;\n    this.router = router;\n    this.webhookService = webhookService;\n    this.linkId = '';\n    this.link = null;\n    this.requests = [];\n    this.loading = false;\n    this.selectedRequest = null;\n    this.autoRefresh = true;\n  }\n  ngOnInit() {\n    this.linkId = this.route.snapshot.paramMap.get('linkId') || '';\n    this.loadLink();\n    this.loadRequests();\n    this.startAutoRefresh();\n  }\n  ngOnDestroy() {\n    this.stopAutoRefresh();\n  }\n  loadLink() {\n    this.webhookService.getLink(this.linkId).subscribe({\n      next: link => {\n        this.link = link;\n      },\n      error: error => {\n        console.error('Error loading link:', error);\n      }\n    });\n  }\n  loadRequests() {\n    this.loading = true;\n    this.webhookService.getRequests(this.linkId).subscribe({\n      next: requests => {\n        this.requests = requests;\n        this.loading = false;\n      },\n      error: error => {\n        console.error('Error loading requests:', error);\n        this.loading = false;\n      }\n    });\n  }\n  clearRequests() {\n    if (!confirm('Are you sure you want to clear all requests?')) {\n      return;\n    }\n    this.webhookService.clearRequests(this.linkId).subscribe({\n      next: () => {\n        this.requests = [];\n        this.selectedRequest = null;\n      },\n      error: error => {\n        console.error('Error clearing requests:', error);\n      }\n    });\n  }\n  selectRequest(request) {\n    this.selectedRequest = request;\n  }\n  goBack() {\n    this.router.navigate(['/']);\n  }\n  toggleAutoRefresh() {\n    this.autoRefresh = !this.autoRefresh;\n    if (this.autoRefresh) {\n      this.startAutoRefresh();\n    } else {\n      this.stopAutoRefresh();\n    }\n  }\n  startAutoRefresh() {\n    if (this.autoRefresh) {\n      this.refreshSubscription = interval(5000).subscribe(() => {\n        this.loadRequests();\n      });\n    }\n  }\n  stopAutoRefresh() {\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n  }\n  formatJson(obj) {\n    return JSON.stringify(obj, null, 2);\n  }\n  getMethodClass(method) {\n    const classes = {\n      'GET': 'method-get',\n      'POST': 'method-post',\n      'PUT': 'method-put',\n      'DELETE': 'method-delete',\n      'PATCH': 'method-patch'\n    };\n    return classes[method] || 'method-other';\n  }\n};\nRequestsComponent = __decorate([Component({\n  selector: 'app-requests',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './requests.component.html',\n  styleUrls: ['./requests.component.css']\n})], RequestsComponent);\nexport { RequestsComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}